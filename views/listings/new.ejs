<%- layout("./layouts/boilerplate.ejs") %>

<style>
    .btn-hover-effect {
        position: relative;
        overflow: hidden;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .btn-hover-effect::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.5);
        transition: left 0.5s;
        z-index: 0;
        opacity: 0;
    }

    .btn-hover-effect:hover::before {
        left: 100%;
        opacity: 1;
    }

    .btn-hover-effect:hover {
        color: white !important;
        font-weight: bolder;
        background: white;
    }

    .animated-border {
        position: relative;
        padding: 20px;
        border: 2px solid transparent;
        border-radius: 15px;
    }

    @keyframes borderAnimation {
        0% {
            border-color: #e7d4cf;
        }
        50% {
            border-color: #ccc;
        }
        100% {
            border-color: black;
        }
    }

</style>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Post Job Description</h1>
        <form method="POST" action="/listings" class="animated-border shadow bg-white" style="background: #f8f9fa;">
            
            <!-- Title  -->
            <div class="mb-3">
                <label for="title" class="form-label">Job Title</label>
                <input type="text" class="form-control" id="title" placeholder="Enter job title" name="listings[title]" required autocomplete="off">
            </div>

            <!-- Company Name  -->
            <div class="mb-3 position-relative">
                <label for="company" class="form-label">Company Name</label>
                <input type="hidden" id="logo" name="listings[logo]">
                <input type="text" class="form-control" id="company" placeholder="Enter company name" name="listings[company]" required autocomplete="off">
                <div id="suggestions" class="list-group position-absolute" style="z-index: 1000;"></div>
            </div>

            <div class="row mb-3">
                <!-- Job Location -->
                <div class="col-md-6">
                    <label for="location" class="form-label">Job Location</label>
                    <input type="text" class="form-control" id="location" placeholder="Enter job location" name="listings[location]" required autocomplete="off">
                    <!-- Custom suggestion list -->
                    <ul id="locationSuggestions" class="list-group position-absolute" style="z-index: 1000; max-height: 200px; overflow-y: auto; display: none;"></ul>
                </div>
              
                <!-- Job Type -->
                <div class="col-md-6">
                    <label for="jobType" class="form-label">Job Type</label>
                    <select class="form-select" id="jobType" name="listings[jobType]" required>
                        <option value="">Select job type</option>
                        <option value="Full-Time">Full-Time</option>
                        <option value="Part-Time">Part-Time</option>
                        <option value="Internship">Internship</option>
                        <option value="Contract">Contract</option>
                    </select>
                </div>
            </div>

            <!-- Description -->
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="descriptionInput" placeholder="Enter a Description Point" autocomplete="off">
                    <button type="button" class="btn btn-outline-secondary" onclick="addDescriptionPoint()">Add</button>

                </div>
                <ul id="descriptionList" class="list-group"></ul>
                <input type="hidden" name="listings[description]" id="descriptionField">
            </div>

            <!-- Requirements (Point-by-Point) -->
            <div class="mb-3">
                <label for="requirementInput" class="form-label">Requirements</label>
                <div class="input-group mb-2">
                    <input type="text" class="form-control" id="requirementInput" placeholder="Enter a requirement" autocomplete="off">
                    <button type="button" class="btn btn-outline-secondary" onclick="addRequirement()">Add</button>
                </div>
                <ul id="requirementList" class="list-group"></ul>
                <input type="hidden" name="listings[requirements]" id="requirementsField">
            </div>

            <div class="row mb-3">
                <!-- Eligibility Category -->
                <div class="col-md-6">
                    <label for="eligibility" class="form-label">Eligibility Category</label>
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" id="eligibilityDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            Select Eligibility
                        </button>
                        <ul class="dropdown-menu p-4" id="eligibilityMenu" style="max-height: 800px; overflow-y: auto; font-size: 1.2rem;" aria-labelledby="eligibilityDropdown">
                            <li><input type="checkbox" name="listings[eligibility][]" value="B.E" id="be"> <label for="be">B.E</label></li>
                            <li><input type="checkbox" name="listings[eligibility][]" value="B.Tech" id="btech"> <label for="btech">B.Tech</label></li>
                            <li><input type="checkbox" name="listings[eligibility][]" value="M.E" id="me"> <label for="me">M.E</label></li>
                            <li><input type="checkbox" name="listings[eligibility][]" value="M.Tech" id="mtech"> <label for="mtech">M.Tech</label></li>
                            <li><input type="checkbox" name="listings[eligibility][]" value="Diploma" id="diploma"> <label for="diploma">Diploma</label></li>
                            <li><input type="checkbox" name="listings[eligibility][]" value="B.Sc" id="bsc"> <label for="bsc">B.Sc</label></li>
                            <li><input type="checkbox" name="listings[eligibility][]" value="M.Sc" id="msc"> <label for="msc">M.Sc</label></li>
                            <li><input type="checkbox" name="listings[eligibility][]" value="Ph.D" id="phd"> <label for="phd">Ph.D</label></li>
                        </ul>
                    </div>                    
                </div>
            
                <!-- Application Deadline -->
                <div class="col-md-6">
                    <label for="date" class="form-label">Application Deadline</label>
                    <input type="date" class="form-control" id="date" name="listings[deadline]" required>
                </div>
            </div>            

            <!-- Salary -->
            <div class="mb-3">
                <label for="salary" class="form-label">Salary</label>
                <input type="text" class="form-control" id="salary" placeholder="Ex: 3LPA-5LPA" name="listings[salary]" required>
            </div>

            <!--  Button -->
            <div class="text-center">
                <button type="submit" class="btn btn-primary btn-hover-effect" style="background-color: green; border: 2px solid green;">POST</button>
            </div>
        </form>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.min.js"></script>
     <script>
        // Function to add a description point
        function addDescriptionPoint() {
            const input = document.getElementById('descriptionInput');
            const list = document.getElementById('descriptionList');
            const hiddenField = document.getElementById('descriptionField');
            const point = input.value.trim();

            if (point) {
                // Create list item
                const listItem = document.createElement('li');
                listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                listItem.innerHTML = `
                    ${point}
                    <button type="button" class="btn btn-sm btn-danger" onclick="removeDescriptionPoint(this)">Remove</button>
                `;

                // Append the new item at the end of the list (queue-like behavior)
                list.appendChild(listItem);

                updateDescriptionField();
                input.value = ''; 
            }
        }


        // Function to remove a description point
        function removeDescriptionPoint(button) {
            const listItem = button.parentElement;
            listItem.remove();
            updateDescriptionField();
        }

        // Function to update the hidden input field with all description points
        function updateDescriptionField() {
            const listItems = document.querySelectorAll('#descriptionList li');
            const points = Array.from(listItems).map(item => item.textContent.trim());
            document.getElementById('descriptionField').value = points.join('; ');
        }


        // location
        const locationInput = document.getElementById('location');
        const suggestionList = document.getElementById('locationSuggestions');

        locationInput.addEventListener('input', function () {
            const query = this.value.trim();

            if (query.length < 2) {
                suggestionList.innerHTML = '';
                suggestionList.style.display = 'none';
                return;
            }
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${query}&addressdetails=1&limit=5`)
                .then(response => response.json())
                .then(data => {
                    suggestionList.innerHTML = ''; 
                    if (data.length > 0) {
                        data.forEach(location => {
                            if (location.address && location.address.city) {
                                const listItem = document.createElement('li');
                                listItem.className = 'list-group-item list-group-item-action';
                                listItem.textContent = location.address.city;
                                listItem.addEventListener('click', function () {
                                    locationInput.value = location.address.city; 
                                    suggestionList.innerHTML = ''; 
                                    suggestionList.style.display = 'none';
                                });
                                suggestionList.appendChild(listItem);
                            }
                        });
                        suggestionList.style.display = 'block';
                    } else {
                        suggestionList.style.display = 'none'; 
                    }
                })
                .catch(err => {
                    console.error('Error fetching location suggestions:', err);
                    suggestionList.style.display = 'none'; 
                });
        });

        document.addEventListener('click', function (event) {
            if (!locationInput.contains(event.target) && !suggestionList.contains(event.target)) {
                suggestionList.innerHTML = ''; 
                suggestionList.style.display = 'none'; 
            }
        });

        //add requirement Function
        function addRequirement() {
            const input = document.getElementById('requirementInput');
            const list = document.getElementById('requirementList');
            const hiddenField = document.getElementById('requirementsField');
            const requirement = input.value.trim();

            if (requirement) {
                // Create list item
                const listItem = document.createElement('li');
                listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                listItem.innerHTML = `
                    ${requirement}
                    <button type="button" class="btn btn-sm btn-danger" onclick="removeRequirement(this)">Remove</button>
                `;
                list.appendChild(listItem);

                updateRequirementsField();
                input.value = ''; 
            }
        }

        // Function to remove a requirement
        function removeRequirement(button) {
            const listItem = button.parentElement;
            listItem.remove();
            updateRequirementsField();
        }

        // Function to update the hidden input field with all requirements
        function updateRequirementsField() {
            const listItems = document.querySelectorAll('#requirementList li');
            const requirements = Array.from(listItems).map(item => item.textContent.trim());
            document.getElementById('requirementsField').value = requirements.join('; ');
        }

        //  Company suggestions
        document.getElementById('company').addEventListener('input', function () {
            const query = this.value.trim();
            if (query.length < 2) {
                document.getElementById('suggestions').innerHTML = '';
                return;
            }
    
            // Suggestions - Clearbit API
            fetch(`https://autocomplete.clearbit.com/v1/companies/suggest?query=${query}`)
                .then(response => response.json())
                .then(data => {
                    const suggestions = data.map(company => `
                        <button type="button" class="list-group-item list-group-item-action d-flex align-items-center" 
                                onclick="selectCompany('${company.name}', '${company.logo}')">
                            <img src="${company.logo}" alt="${company.name} logo" class="me-2" 
                                 style="width: 30px; height: 30px; border-radius: 50%;">
                            <span>${company.name}</span>
                        </button>
                    `).join('');
                    document.getElementById('suggestions').innerHTML = suggestions;
                })
                .catch(err => console.error('Error fetching companies:', err));
        });

        function selectCompany(company, logo) {
            document.getElementById('company').value = company;
            document.getElementById('logo').value = logo;
            document.getElementById('suggestions').innerHTML = '';
        }
    </script>
</body>
